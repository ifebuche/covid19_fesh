<<<<<<< HEAD
# SPDX-FileCopyrightText: 2015 Eric Larson
#
# SPDX-License-Identifier: Apache-2.0

=======
>>>>>>> 27dd9875f98c51b82553091a9dbcf027191524ef
"""
The cache object API for implementing caches. The default is a thread
safe in-memory dictionary.
"""
from threading import Lock


class BaseCache(object):

    def get(self, key):
        raise NotImplementedError()

<<<<<<< HEAD
    def set(self, key, value, expires=None):
=======
    def set(self, key, value):
>>>>>>> 27dd9875f98c51b82553091a9dbcf027191524ef
        raise NotImplementedError()

    def delete(self, key):
        raise NotImplementedError()

    def close(self):
        pass


class DictCache(BaseCache):

    def __init__(self, init_dict=None):
        self.lock = Lock()
        self.data = init_dict or {}

    def get(self, key):
        return self.data.get(key, None)

<<<<<<< HEAD
    def set(self, key, value, expires=None):
=======
    def set(self, key, value):
>>>>>>> 27dd9875f98c51b82553091a9dbcf027191524ef
        with self.lock:
            self.data.update({key: value})

    def delete(self, key):
        with self.lock:
            if key in self.data:
                self.data.pop(key)
